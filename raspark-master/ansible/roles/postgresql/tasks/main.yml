---
# tasks file for postgresql

# Install PostgreSQL
- name: "[POSTGRESQL] Install PostgreSQL (Debian based)"
  apt:
    name: postgresql
    state: latest
    update_cache: yes
  when: ansible_os_family == "Debian"
  tags:
    - postgresql

# Install libpq-dev
- name: "[POSTGRESQL] Install libpq"
  apt:
    name: libpq-dev
    state: latest
  tags:
    - postgresql

# Install acl
- name: "[POSTGRESQL] Install acl"
  apt:
    name: acl
    state: latest
  tags:
    - postgresql

# Install psycopg2
- name: "[POSTGRESQL] Install psycopg2"
  pip:
    name: psycopg2
    state: latest
  tags:
    - postgresql

- name: Ensure PostgreSQL data directory exists.
  file:
    path: "{{ postgresql_data_dir }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    state: directory
    mode: 0700

- name: "[POSTGRESQL] Configure pg_hba.conf PostgreSQL (Debian based)"
  copy:
    src: "pg_hba.conf"
    dest: "{{ postgresql_data_dir }}/pg_hba.conf"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
  when: ansible_os_family == "Debian"
  notify:
    - "[POSTGRESQL] Restart PostgreSQL"
  tags:
    - postgresql

- name: "[POSTGRESQL] Configure pg_hba.conf PostgreSQL (Debian based)"
  copy:
    src: "pg_hba.conf"
    dest: /etc/postgresql/12/main/pg_hba.conf
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
  when: ansible_os_family == "Debian"
  notify:
    - "[POSTGRESQL] Restart PostgreSQL"
  tags:
    - postgresql

- name: "[POSTGRESQL] Configure postgresql.conf PostgreSQL (Debian based)"
  lineinfile:
    path: "{{ postgresql_data_dir }}/postgresql.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"   
  with_items:
    - { regexp: '^listen_addresses =', line: "listen_addresses = '*'"}
    - { regexp: '^data_directory =', line: "data_directory = '{{ postgresql_data_dir }}'"}
  when: ansible_os_family == "Debian"
  notify:
    - "[POSTGRESQL] Restart PostgreSQL"
  tags:
    - postgresql

- name: "[POSTGRESQL] Configure postgresql.conf PostgreSQL (Debian based)"
  lineinfile:
    path: /etc/postgresql/12/main/postgresql.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"   
  with_items:
    - { regexp: '^listen_addresses =', line: "listen_addresses = '*'"}
    - { regexp: '^data_directory =', line: "data_directory = '{{ postgresql_data_dir }}'"}
  when: ansible_os_family == "Debian"
  notify:
    - "[POSTGRESQL] Restart PostgreSQL"
  tags:
    - postgresql

- name: "[POSTGRESQL] Ensure ~/.bashrc for hduser exports PGSQL_HOME"
  lineinfile:
    path: "/home/hduser/.bashrc"
    line: "{{ item }}"
  with_items:
    - "export PGSQL_HOME=/usr/lib/postgresql/12"
    - "export PATH=$PATH:$PGSQL_HOME/bin"

- name: "[POSTGRESQL] Add MBP key as authorized for postgres user"
  authorized_key:
    user: "{{ postgresql_user }}"
    key: "{{ lookup('file', '/Users/owenwilliams/.ssh/id_rsa.pub') }}"

- name: Check if PostgreSQL database is initialized.
  stat:
    path: "{{ postgresql_data_dir }}/PG_VERSION"
  register: pgdata_dir_version

- name: Ensure PostgreSQL database is initialized.
  command: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_dir }}"
  when: not pgdata_dir_version.stat.exists
  become: true
  become_user: "{{ postgresql_user }}"
  vars:
    ansible_ssh_pipelining: true

- name: "[POSTGRESQL] Start PostgreSQL"
  service:
    name: postgresql@12-main
    state: started
  tags:
    - postgresql

- name: Ensure "land_search" tablespace directory exists.
  file:
    path: "{{ postgresql_data_dir }}/land_search"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    state: directory
    mode: 0700

- name: Create a new tablespace called land_search
  become: true
  become_user: postgres  
  postgresql_tablespace:
    name: land_search
    owner: "{{ postgresql_user }}"
    location: "{{ postgresql_data_dir }}/land_search"

- name: Create a new database with name original_dump
  become: true
  become_user: postgres
  postgresql_db:
    name: original_dump
    tablespace: land_search

- name: Install the package gnupg2
  apt:
    name: gnupg2
    state: latest

- name: Add an Apt signing key for postgres
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add specified repository into sources list
  apt_repository:
    repo: deb http://apt.postgresql.org/pub/repos/apt/ groovy-pgdg main
    state: present

- name: Install postgis
  apt:
    pkg:
    - postgis
    - postgresql-12-postgis-3

- name: Adds postgis extension to the database original_dump
  become: true
  become_user: postgres
  community.general.postgresql_ext:
    name: postgis
    db: original_dump
